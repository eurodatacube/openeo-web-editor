{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.array.reduce.js","webpack:///./node_modules/core-js/internals/engine-is-node.js","webpack:///./node_modules/core-js/internals/array-method-is-strict.js","webpack:///./node_modules/core-js/internals/array-reduce.js","webpack:///./node_modules/commonmark/lib/node.js","webpack:///./node_modules/commonmark/lib/from-code-point.js","webpack:///./node_modules/commonmark/lib/common.js","webpack:///./node_modules/commonmark/lib/inlines.js","webpack:///./node_modules/commonmark/lib/blocks.js","webpack:///./node_modules/commonmark/lib/render/renderer.js","webpack:///./node_modules/commonmark/lib/render/html.js","webpack:///./node_modules/commonmark/lib/render/xml.js"],"names":["$","$reduce","left","arrayMethodIsStrict","CHROME_VERSION","IS_NODE","STRICT_METHOD","CHROME_BUG","target","proto","forced","reduce","callbackfn","length","arguments","this","undefined","classof","global","module","exports","process","fails","METHOD_NAME","argument","method","call","aCallable","toObject","IndexedObject","lengthOfArrayLike","$TypeError","TypeError","createMethod","IS_RIGHT","that","argumentsLength","memo","O","self","index","i","right","isContainer","node","_type","resumeAt","entering","current","cur","container","_firstChild","root","_next","_parent","NodeWalker","next","Node","nodeType","sourcepos","_lastChild","_prev","_sourcepos","_lastLineBlank","_lastLineChecked","_open","_string_content","_literal","_listData","_info","_destination","_title","_isFenced","_fenceChar","_fenceLength","_fenceOffset","_level","_onEnter","_onExit","prototype","Object","defineProperty","get","set","s","type","t","tight","start","n","delimiter","delim","appendChild","child","unlink","prependChild","insertAfter","sibling","insertBefore","walker","_fromCodePoint","C_BACKSLASH","ENTITY","TAGNAME","ATTRIBUTENAME","UNQUOTEDVALUE","SINGLEQUOTEDVALUE","DOUBLEQUOTEDVALUE","ATTRIBUTEVALUE","ATTRIBUTEVALUESPEC","ATTRIBUTE","OPENTAG","CLOSETAG","HTMLCOMMENT","PROCESSINGINSTRUCTION","DECLARATION","CDATA","HTMLTAG","reHtmlTag","RegExp","reBackslashOrAmp","ESCAPABLE","reEntityOrEscapedChar","XMLSPECIAL","reXmlSpecial","unescapeChar","charCodeAt","charAt","unescapeString","test","replace","normalizeURI","uri","err","replaceUnsafeChar","escapeXml","fromCodePoint","_","String","e","RangeError","fromCharCode","stringFromCharCode","floor","Math","highSurrogate","lowSurrogate","MAX_SIZE","codeUnits","result","codePoint","Number","isFinite","push","apply","C_NEWLINE","C_ASTERISK","C_UNDERSCORE","C_BACKTICK","C_OPEN_BRACKET","C_CLOSE_BRACKET","C_LESSTHAN","C_BANG","C_AMPERSAND","C_OPEN_PAREN","C_CLOSE_PAREN","C_COLON","C_SINGLEQUOTE","C_DOUBLEQUOTE","ESCAPED_CHAR","rePunctuation","reLinkTitle","reLinkDestinationBraces","reEscapable","reEntityHere","reTicks","reTicksHere","reEllipses","reDash","reEmailAutolink","reAutolink","reSpnl","reWhitespaceChar","reUnicodeWhitespaceChar","reFinalSpace","reInitialSpace","reSpaceAtEndOfLine","reLinkLabel","reMain","normalizeReference","string","slice","trim","toLowerCase","toUpperCase","re","m","exec","subject","pos","peek","spnl","match","parseBackticks","block","ticks","matched","contents","afterOpenTicks","parseBackslash","subj","parseAutolink","dest","parseHtmlTag","scanDelims","cc","char_before","char_after","cc_after","left_flanking","right_flanking","can_open","can_close","after_is_whitespace","after_is_punctuation","before_is_whitespace","before_is_punctuation","numdelims","startpos","handleDelim","res","options","smart","delimiters","origdelims","previous","removeDelimiter","removeDelimitersBetween","bottom","top","processEmphasis","stack_bottom","opener","closer","old_closer","opener_inl","closer_inl","tempstack","use_delims","tmp","opener_found","openers_bottom","odd_match","closercc","emph","literal","parseLinkTitle","title","substr","parseLinkDestination","c","savepos","openparens","parseLinkLabel","parseOpenBracket","addBracket","parseBang","parseCloseBracket","is_image","reflabel","brackets","active","removeBracket","image","beforelabel","bracketAfter","link","refmap","destination","previousDelimiter","parseEntity","parseString","chars","enCount","emCount","repeat","parseNewline","lastc","hardbreak","parseReference","rawlabel","matchChars","beforetitle","atLineEnd","normlabel","parseInline","parseInlines","InlineParser","parse","CODE_INDENT","C_TAB","C_GREATERTHAN","C_SPACE","reHtmlBlockOpen","reHtmlBlockClose","reThematicBreak","reMaybeSpecial","reNonSpace","reBulletListMarker","reOrderedListMarker","reATXHeadingMarker","reCodeFence","reClosingCodeFence","reSetextHeadingLine","reLineEnding","isBlank","isSpaceOrTab","ln","endsWithBlankLine","addLine","partiallyConsumedTab","offset","charsToTab","column","tip","currentLine","addChild","tag","blocks","canContain","finalize","lineNumber","column_number","newBlock","parseListMarker","parser","nextc","spacesStartCol","spacesStartOffset","rest","nextNonspace","data","bulletChar","padding","markerOffset","indent","parseInt","advanceNextNonspace","advanceOffset","blank_item","spaces_after_marker","listsMatch","list_data","item_data","closeUnmatchedBlocks","allClosed","oldtip","lastMatchedContainer","parent","document","continue","acceptsLines","list","item","subitem","block_quote","indented","blank","heading","thematic_break","code_block","lastLineLength","content","newlinePos","indexOf","firstLine","info","html_block","_htmlBlockType","paragraph","hasReferenceDefs","inlineParser","blockStarts","level","fenceLength","blockType","b","count","columns","charsToAdvance","nextNonspaceColumn","findNextNonspace","cols","incorporateLine","lastChild","all_matched","doc","matchedLeaf","starts","startsLen","lastLineBlank","cont","above","processInlines","event","Document","input","time","console","lines","split","len","timeEnd","Parser","Renderer","render","ast","buffer","lastOut","lit","str","cr","out","esc","reUnsafeProtocol","reSafeDataProtocol","potentiallyUnsafe","url","name","attrs","selfclosing","disableTags","attrib","HtmlRenderer","softbreak","linebreak","safe","strong","grandparent","listTight","tagname","code","info_words","listType","listStart","toString","html_inline","custom_inline","onEnter","onExit","custom_block","att","create","text","reXMLTag","toTagName","XmlRenderer","indentLevel","selfClosing","nodetype","listDelimiter","delimword"],"mappings":"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","file":"js/chunk-459b1f2d.f63286f7.js","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar $reduce = require('../internals/array-reduce').left;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar CHROME_VERSION = require('../internals/engine-v8-version');\nvar IS_NODE = require('../internals/engine-is-node');\n\nvar STRICT_METHOD = arrayMethodIsStrict('reduce');\n// Chrome 80-82 has a critical bug\n// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982\nvar CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;\n\n// `Array.prototype.reduce` method\n// https://tc39.es/ecma262/#sec-array.prototype.reduce\n$({ target: 'Array', proto: true, forced: !STRICT_METHOD || CHROME_BUG }, {\n  reduce: function reduce(callbackfn /* , initialValue */) {\n    var length = arguments.length;\n    return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : undefined);\n  }\n});\n","var classof = require('../internals/classof-raw');\nvar global = require('../internals/global');\n\nmodule.exports = classof(global.process) == 'process';\n","'use strict';\nvar fails = require('../internals/fails');\n\nmodule.exports = function (METHOD_NAME, argument) {\n  var method = [][METHOD_NAME];\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call -- required for testing\n    method.call(null, argument || function () { return 1; }, 1);\n  });\n};\n","var aCallable = require('../internals/a-callable');\nvar toObject = require('../internals/to-object');\nvar IndexedObject = require('../internals/indexed-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\nvar $TypeError = TypeError;\n\n// `Array.prototype.{ reduce, reduceRight }` methods implementation\nvar createMethod = function (IS_RIGHT) {\n  return function (that, callbackfn, argumentsLength, memo) {\n    aCallable(callbackfn);\n    var O = toObject(that);\n    var self = IndexedObject(O);\n    var length = lengthOfArrayLike(O);\n    var index = IS_RIGHT ? length - 1 : 0;\n    var i = IS_RIGHT ? -1 : 1;\n    if (argumentsLength < 2) while (true) {\n      if (index in self) {\n        memo = self[index];\n        index += i;\n        break;\n      }\n      index += i;\n      if (IS_RIGHT ? index < 0 : length <= index) {\n        throw $TypeError('Reduce of empty array with no initial value');\n      }\n    }\n    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {\n      memo = callbackfn(memo, self[index], index, O);\n    }\n    return memo;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.reduce` method\n  // https://tc39.es/ecma262/#sec-array.prototype.reduce\n  left: createMethod(false),\n  // `Array.prototype.reduceRight` method\n  // https://tc39.es/ecma262/#sec-array.prototype.reduceright\n  right: createMethod(true)\n};\n","\"use strict\";\n\nfunction isContainer(node) {\n    switch (node._type) {\n        case \"document\":\n        case \"block_quote\":\n        case \"list\":\n        case \"item\":\n        case \"paragraph\":\n        case \"heading\":\n        case \"emph\":\n        case \"strong\":\n        case \"link\":\n        case \"image\":\n        case \"custom_inline\":\n        case \"custom_block\":\n            return true;\n        default:\n            return false;\n    }\n}\n\nvar resumeAt = function(node, entering) {\n    this.current = node;\n    this.entering = entering === true;\n};\n\nvar next = function() {\n    var cur = this.current;\n    var entering = this.entering;\n\n    if (cur === null) {\n        return null;\n    }\n\n    var container = isContainer(cur);\n\n    if (entering && container) {\n        if (cur._firstChild) {\n            this.current = cur._firstChild;\n            this.entering = true;\n        } else {\n            // stay on node but exit\n            this.entering = false;\n        }\n    } else if (cur === this.root) {\n        this.current = null;\n    } else if (cur._next === null) {\n        this.current = cur._parent;\n        this.entering = false;\n    } else {\n        this.current = cur._next;\n        this.entering = true;\n    }\n\n    return { entering: entering, node: cur };\n};\n\nvar NodeWalker = function(root) {\n    return {\n        current: root,\n        root: root,\n        entering: true,\n        next: next,\n        resumeAt: resumeAt\n    };\n};\n\nvar Node = function(nodeType, sourcepos) {\n    this._type = nodeType;\n    this._parent = null;\n    this._firstChild = null;\n    this._lastChild = null;\n    this._prev = null;\n    this._next = null;\n    this._sourcepos = sourcepos;\n    this._lastLineBlank = false;\n    this._lastLineChecked = false;\n    this._open = true;\n    this._string_content = null;\n    this._literal = null;\n    this._listData = {};\n    this._info = null;\n    this._destination = null;\n    this._title = null;\n    this._isFenced = false;\n    this._fenceChar = null;\n    this._fenceLength = 0;\n    this._fenceOffset = null;\n    this._level = null;\n    this._onEnter = null;\n    this._onExit = null;\n};\n\nvar proto = Node.prototype;\n\nObject.defineProperty(proto, \"isContainer\", {\n    get: function() {\n        return isContainer(this);\n    }\n});\n\nObject.defineProperty(proto, \"type\", {\n    get: function() {\n        return this._type;\n    }\n});\n\nObject.defineProperty(proto, \"firstChild\", {\n    get: function() {\n        return this._firstChild;\n    }\n});\n\nObject.defineProperty(proto, \"lastChild\", {\n    get: function() {\n        return this._lastChild;\n    }\n});\n\nObject.defineProperty(proto, \"next\", {\n    get: function() {\n        return this._next;\n    }\n});\n\nObject.defineProperty(proto, \"prev\", {\n    get: function() {\n        return this._prev;\n    }\n});\n\nObject.defineProperty(proto, \"parent\", {\n    get: function() {\n        return this._parent;\n    }\n});\n\nObject.defineProperty(proto, \"sourcepos\", {\n    get: function() {\n        return this._sourcepos;\n    }\n});\n\nObject.defineProperty(proto, \"literal\", {\n    get: function() {\n        return this._literal;\n    },\n    set: function(s) {\n        this._literal = s;\n    }\n});\n\nObject.defineProperty(proto, \"destination\", {\n    get: function() {\n        return this._destination;\n    },\n    set: function(s) {\n        this._destination = s;\n    }\n});\n\nObject.defineProperty(proto, \"title\", {\n    get: function() {\n        return this._title;\n    },\n    set: function(s) {\n        this._title = s;\n    }\n});\n\nObject.defineProperty(proto, \"info\", {\n    get: function() {\n        return this._info;\n    },\n    set: function(s) {\n        this._info = s;\n    }\n});\n\nObject.defineProperty(proto, \"level\", {\n    get: function() {\n        return this._level;\n    },\n    set: function(s) {\n        this._level = s;\n    }\n});\n\nObject.defineProperty(proto, \"listType\", {\n    get: function() {\n        return this._listData.type;\n    },\n    set: function(t) {\n        this._listData.type = t;\n    }\n});\n\nObject.defineProperty(proto, \"listTight\", {\n    get: function() {\n        return this._listData.tight;\n    },\n    set: function(t) {\n        this._listData.tight = t;\n    }\n});\n\nObject.defineProperty(proto, \"listStart\", {\n    get: function() {\n        return this._listData.start;\n    },\n    set: function(n) {\n        this._listData.start = n;\n    }\n});\n\nObject.defineProperty(proto, \"listDelimiter\", {\n    get: function() {\n        return this._listData.delimiter;\n    },\n    set: function(delim) {\n        this._listData.delimiter = delim;\n    }\n});\n\nObject.defineProperty(proto, \"onEnter\", {\n    get: function() {\n        return this._onEnter;\n    },\n    set: function(s) {\n        this._onEnter = s;\n    }\n});\n\nObject.defineProperty(proto, \"onExit\", {\n    get: function() {\n        return this._onExit;\n    },\n    set: function(s) {\n        this._onExit = s;\n    }\n});\n\nNode.prototype.appendChild = function(child) {\n    child.unlink();\n    child._parent = this;\n    if (this._lastChild) {\n        this._lastChild._next = child;\n        child._prev = this._lastChild;\n        this._lastChild = child;\n    } else {\n        this._firstChild = child;\n        this._lastChild = child;\n    }\n};\n\nNode.prototype.prependChild = function(child) {\n    child.unlink();\n    child._parent = this;\n    if (this._firstChild) {\n        this._firstChild._prev = child;\n        child._next = this._firstChild;\n        this._firstChild = child;\n    } else {\n        this._firstChild = child;\n        this._lastChild = child;\n    }\n};\n\nNode.prototype.unlink = function() {\n    if (this._prev) {\n        this._prev._next = this._next;\n    } else if (this._parent) {\n        this._parent._firstChild = this._next;\n    }\n    if (this._next) {\n        this._next._prev = this._prev;\n    } else if (this._parent) {\n        this._parent._lastChild = this._prev;\n    }\n    this._parent = null;\n    this._next = null;\n    this._prev = null;\n};\n\nNode.prototype.insertAfter = function(sibling) {\n    sibling.unlink();\n    sibling._next = this._next;\n    if (sibling._next) {\n        sibling._next._prev = sibling;\n    }\n    sibling._prev = this;\n    this._next = sibling;\n    sibling._parent = this._parent;\n    if (!sibling._next) {\n        sibling._parent._lastChild = sibling;\n    }\n};\n\nNode.prototype.insertBefore = function(sibling) {\n    sibling.unlink();\n    sibling._prev = this._prev;\n    if (sibling._prev) {\n        sibling._prev._next = sibling;\n    }\n    sibling._next = this;\n    this._prev = sibling;\n    sibling._parent = this._parent;\n    if (!sibling._prev) {\n        sibling._parent._firstChild = sibling;\n    }\n};\n\nNode.prototype.walker = function() {\n    var walker = new NodeWalker(this);\n    return walker;\n};\n\nexport default Node;\n\n/* Example of use of walker:\n\n var walker = w.walker();\n var event;\n\n while (event = walker.next()) {\n console.log(event.entering, event.node.type);\n }\n\n */\n","\"use strict\";\n\n// derived from https://github.com/mathiasbynens/String.fromCodePoint\n/*! http://mths.be/fromcodepoint v0.2.1 by @mathias */\n\nvar _fromCodePoint;\n\nexport default function fromCodePoint(_) {\n    return _fromCodePoint(_);\n}\n\nif (String.fromCodePoint) {\n    _fromCodePoint = function(_) {\n        try {\n            return String.fromCodePoint(_);\n        } catch (e) {\n            if (e instanceof RangeError) {\n                return String.fromCharCode(0xfffd);\n            }\n            throw e;\n        }\n    };\n} else {\n    var stringFromCharCode = String.fromCharCode;\n    var floor = Math.floor;\n    _fromCodePoint = function() {\n        var MAX_SIZE = 0x4000;\n        var codeUnits = [];\n        var highSurrogate;\n        var lowSurrogate;\n        var index = -1;\n        var length = arguments.length;\n        if (!length) {\n            return \"\";\n        }\n        var result = \"\";\n        while (++index < length) {\n            var codePoint = Number(arguments[index]);\n            if (\n                !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n                codePoint < 0 || // not a valid Unicode code point\n                codePoint > 0x10ffff || // not a valid Unicode code point\n                floor(codePoint) !== codePoint // not an integer\n            ) {\n                return String.fromCharCode(0xfffd);\n            }\n            if (codePoint <= 0xffff) {\n                // BMP code point\n                codeUnits.push(codePoint);\n            } else {\n                // Astral code point; split in surrogate halves\n                // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n                codePoint -= 0x10000;\n                highSurrogate = (codePoint >> 10) + 0xd800;\n                lowSurrogate = (codePoint % 0x400) + 0xdc00;\n                codeUnits.push(highSurrogate, lowSurrogate);\n            }\n            if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n                result += stringFromCharCode.apply(null, codeUnits);\n                codeUnits.length = 0;\n            }\n        }\n        return result;\n    };\n}\n","\"use strict\";\n\nimport encode from \"mdurl/encode.js\";\nimport { decodeHTML } from \"entities\";\n\nvar C_BACKSLASH = 92;\n\nvar ENTITY = \"&(?:#x[a-f0-9]{1,6}|#[0-9]{1,7}|[a-z][a-z0-9]{1,31});\";\n\nvar TAGNAME = \"[A-Za-z][A-Za-z0-9-]*\";\nvar ATTRIBUTENAME = \"[a-zA-Z_:][a-zA-Z0-9:._-]*\";\nvar UNQUOTEDVALUE = \"[^\\\"'=<>`\\\\x00-\\\\x20]+\";\nvar SINGLEQUOTEDVALUE = \"'[^']*'\";\nvar DOUBLEQUOTEDVALUE = '\"[^\"]*\"';\nvar ATTRIBUTEVALUE =\n    \"(?:\" +\n    UNQUOTEDVALUE +\n    \"|\" +\n    SINGLEQUOTEDVALUE +\n    \"|\" +\n    DOUBLEQUOTEDVALUE +\n    \")\";\nvar ATTRIBUTEVALUESPEC = \"(?:\" + \"\\\\s*=\" + \"\\\\s*\" + ATTRIBUTEVALUE + \")\";\nvar ATTRIBUTE = \"(?:\" + \"\\\\s+\" + ATTRIBUTENAME + ATTRIBUTEVALUESPEC + \"?)\";\nvar OPENTAG = \"<\" + TAGNAME + ATTRIBUTE + \"*\" + \"\\\\s*/?>\";\nvar CLOSETAG = \"</\" + TAGNAME + \"\\\\s*[>]\";\nvar HTMLCOMMENT = \"<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->\";\nvar PROCESSINGINSTRUCTION = \"[<][?][\\\\s\\\\S]*?[?][>]\";\nvar DECLARATION = \"<![A-Z]+\" + \"\\\\s+[^>]*>\";\nvar CDATA = \"<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\";\nvar HTMLTAG =\n    \"(?:\" +\n    OPENTAG +\n    \"|\" +\n    CLOSETAG +\n    \"|\" +\n    HTMLCOMMENT +\n    \"|\" +\n    PROCESSINGINSTRUCTION +\n    \"|\" +\n    DECLARATION +\n    \"|\" +\n    CDATA +\n    \")\";\nvar reHtmlTag = new RegExp(\"^\" + HTMLTAG);\n\nvar reBackslashOrAmp = /[\\\\&]/;\n\nvar ESCAPABLE = \"[!\\\"#$%&'()*+,./:;<=>?@[\\\\\\\\\\\\]^_`{|}~-]\";\n\nvar reEntityOrEscapedChar = new RegExp(\"\\\\\\\\\" + ESCAPABLE + \"|\" + ENTITY, \"gi\");\n\nvar XMLSPECIAL = '[&<>\"]';\n\nvar reXmlSpecial = new RegExp(XMLSPECIAL, \"g\");\n\nvar unescapeChar = function(s) {\n    if (s.charCodeAt(0) === C_BACKSLASH) {\n        return s.charAt(1);\n    } else {\n        return decodeHTML(s);\n    }\n};\n\n// Replace entities and backslash escapes with literal characters.\nvar unescapeString = function(s) {\n    if (reBackslashOrAmp.test(s)) {\n        return s.replace(reEntityOrEscapedChar, unescapeChar);\n    } else {\n        return s;\n    }\n};\n\nvar normalizeURI = function(uri) {\n    try {\n        return encode(uri);\n    } catch (err) {\n        return uri;\n    }\n};\n\nvar replaceUnsafeChar = function(s) {\n    switch (s) {\n        case \"&\":\n            return \"&amp;\";\n        case \"<\":\n            return \"&lt;\";\n        case \">\":\n            return \"&gt;\";\n        case '\"':\n            return \"&quot;\";\n        default:\n            return s;\n    }\n};\n\nvar escapeXml = function(s) {\n    if (reXmlSpecial.test(s)) {\n        return s.replace(reXmlSpecial, replaceUnsafeChar);\n    } else {\n        return s;\n    }\n};\n\nexport {\n    unescapeString,\n    normalizeURI,\n    escapeXml,\n    reHtmlTag,\n    OPENTAG,\n    CLOSETAG,\n    ENTITY,\n    ESCAPABLE\n};\n","\"use strict\";\n\nimport Node from \"./node.js\";\nimport * as common from \"./common.js\";\nimport fromCodePoint from \"./from-code-point.js\";\nimport { decodeHTML } from \"entities\";\nimport \"string.prototype.repeat\"; // Polyfill for String.prototype.repeat\n\nvar normalizeURI = common.normalizeURI;\nvar unescapeString = common.unescapeString;\n\n// Constants for character codes:\n\nvar C_NEWLINE = 10;\nvar C_ASTERISK = 42;\nvar C_UNDERSCORE = 95;\nvar C_BACKTICK = 96;\nvar C_OPEN_BRACKET = 91;\nvar C_CLOSE_BRACKET = 93;\nvar C_LESSTHAN = 60;\nvar C_BANG = 33;\nvar C_BACKSLASH = 92;\nvar C_AMPERSAND = 38;\nvar C_OPEN_PAREN = 40;\nvar C_CLOSE_PAREN = 41;\nvar C_COLON = 58;\nvar C_SINGLEQUOTE = 39;\nvar C_DOUBLEQUOTE = 34;\n\n// Some regexps used in inline parser:\n\nvar ESCAPABLE = common.ESCAPABLE;\nvar ESCAPED_CHAR = \"\\\\\\\\\" + ESCAPABLE;\n\nvar ENTITY = common.ENTITY;\nvar reHtmlTag = common.reHtmlTag;\n\nvar rePunctuation = new RegExp(\n    /[!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]/\n);\n\nvar reLinkTitle = new RegExp(\n    '^(?:\"(' +\n        ESCAPED_CHAR +\n        '|[^\"\\\\x00])*\"' +\n        \"|\" +\n        \"'(\" +\n        ESCAPED_CHAR +\n        \"|[^'\\\\x00])*'\" +\n        \"|\" +\n        \"\\\\((\" +\n        ESCAPED_CHAR +\n        \"|[^()\\\\x00])*\\\\))\"\n);\n\nvar reLinkDestinationBraces = /^(?:<(?:[^<>\\n\\\\\\x00]|\\\\.)*>)/;\n\nvar reEscapable = new RegExp(\"^\" + ESCAPABLE);\n\nvar reEntityHere = new RegExp(\"^\" + ENTITY, \"i\");\n\nvar reTicks = /`+/;\n\nvar reTicksHere = /^`+/;\n\nvar reEllipses = /\\.\\.\\./g;\n\nvar reDash = /--+/g;\n\nvar reEmailAutolink = /^<([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/;\n\nvar reAutolink = /^<[A-Za-z][A-Za-z0-9.+-]{1,31}:[^<>\\x00-\\x20]*>/i;\n\nvar reSpnl = /^ *(?:\\n *)?/;\n\nvar reWhitespaceChar = /^[ \\t\\n\\x0b\\x0c\\x0d]/;\n\nvar reUnicodeWhitespaceChar = /^\\s/;\n\nvar reFinalSpace = / *$/;\n\nvar reInitialSpace = /^ */;\n\nvar reSpaceAtEndOfLine = /^ *(?:\\n|$)/;\n\nvar reLinkLabel = /^\\[(?:[^\\\\\\[\\]]|\\\\.){0,1000}\\]/;\n\n// Matches a string of non-special characters.\nvar reMain = /^[^\\n`\\[\\]\\\\!<&*_'\"]+/m;\n\nvar text = function(s) {\n    var node = new Node(\"text\");\n    node._literal = s;\n    return node;\n};\n\n// normalize a reference in reference link (remove []s, trim,\n// collapse internal space, unicode case fold.\n// See commonmark/commonmark.js#168.\nvar normalizeReference = function(string) {\n    return string\n        .slice(1, string.length - 1)\n        .trim()\n        .replace(/[ \\t\\r\\n]+/, \" \")\n        .toLowerCase()\n        .toUpperCase();\n};\n\n// INLINE PARSER\n\n// These are methods of an InlineParser object, defined below.\n// An InlineParser keeps track of a subject (a string to be\n// parsed) and a position in that subject.\n\n// If re matches at current position in the subject, advance\n// position in subject and return the match; otherwise return null.\nvar match = function(re) {\n    var m = re.exec(this.subject.slice(this.pos));\n    if (m === null) {\n        return null;\n    } else {\n        this.pos += m.index + m[0].length;\n        return m[0];\n    }\n};\n\n// Returns the code for the character at the current subject position, or -1\n// there are no more characters.\nvar peek = function() {\n    if (this.pos < this.subject.length) {\n        return this.subject.charCodeAt(this.pos);\n    } else {\n        return -1;\n    }\n};\n\n// Parse zero or more space characters, including at most one newline\nvar spnl = function() {\n    this.match(reSpnl);\n    return true;\n};\n\n// All of the parsers below try to match something at the current position\n// in the subject.  If they succeed in matching anything, they\n// return the inline matched, advancing the subject.\n\n// Attempt to parse backticks, adding either a backtick code span or a\n// literal sequence of backticks.\nvar parseBackticks = function(block) {\n    var ticks = this.match(reTicksHere);\n    if (ticks === null) {\n        return false;\n    }\n    var afterOpenTicks = this.pos;\n    var matched;\n    var node;\n    var contents;\n    while ((matched = this.match(reTicks)) !== null) {\n        if (matched === ticks) {\n            node = new Node(\"code\");\n            contents = this.subject\n                .slice(afterOpenTicks, this.pos - ticks.length)\n                .replace(/\\n/gm, \" \");\n            if (\n                contents.length > 0 &&\n                contents.match(/[^ ]/) !== null &&\n                contents[0] == \" \" &&\n                contents[contents.length - 1] == \" \"\n            ) {\n                node._literal = contents.slice(1, contents.length - 1);\n            } else {\n                node._literal = contents;\n            }\n            block.appendChild(node);\n            return true;\n        }\n    }\n    // If we got here, we didn't match a closing backtick sequence.\n    this.pos = afterOpenTicks;\n    block.appendChild(text(ticks));\n    return true;\n};\n\n// Parse a backslash-escaped special character, adding either the escaped\n// character, a hard line break (if the backslash is followed by a newline),\n// or a literal backslash to the block's children.  Assumes current character\n// is a backslash.\nvar parseBackslash = function(block) {\n    var subj = this.subject;\n    var node;\n    this.pos += 1;\n    if (this.peek() === C_NEWLINE) {\n        this.pos += 1;\n        node = new Node(\"linebreak\");\n        block.appendChild(node);\n    } else if (reEscapable.test(subj.charAt(this.pos))) {\n        block.appendChild(text(subj.charAt(this.pos)));\n        this.pos += 1;\n    } else {\n        block.appendChild(text(\"\\\\\"));\n    }\n    return true;\n};\n\n// Attempt to parse an autolink (URL or email in pointy brackets).\nvar parseAutolink = function(block) {\n    var m;\n    var dest;\n    var node;\n    if ((m = this.match(reEmailAutolink))) {\n        dest = m.slice(1, m.length - 1);\n        node = new Node(\"link\");\n        node._destination = normalizeURI(\"mailto:\" + dest);\n        node._title = \"\";\n        node.appendChild(text(dest));\n        block.appendChild(node);\n        return true;\n    } else if ((m = this.match(reAutolink))) {\n        dest = m.slice(1, m.length - 1);\n        node = new Node(\"link\");\n        node._destination = normalizeURI(dest);\n        node._title = \"\";\n        node.appendChild(text(dest));\n        block.appendChild(node);\n        return true;\n    } else {\n        return false;\n    }\n};\n\n// Attempt to parse a raw HTML tag.\nvar parseHtmlTag = function(block) {\n    var m = this.match(reHtmlTag);\n    if (m === null) {\n        return false;\n    } else {\n        var node = new Node(\"html_inline\");\n        node._literal = m;\n        block.appendChild(node);\n        return true;\n    }\n};\n\n// Scan a sequence of characters with code cc, and return information about\n// the number of delimiters and whether they are positioned such that\n// they can open and/or close emphasis or strong emphasis.  A utility\n// function for strong/emph parsing.\nvar scanDelims = function(cc) {\n    var numdelims = 0;\n    var char_before, char_after, cc_after;\n    var startpos = this.pos;\n    var left_flanking, right_flanking, can_open, can_close;\n    var after_is_whitespace,\n        after_is_punctuation,\n        before_is_whitespace,\n        before_is_punctuation;\n\n    if (cc === C_SINGLEQUOTE || cc === C_DOUBLEQUOTE) {\n        numdelims++;\n        this.pos++;\n    } else {\n        while (this.peek() === cc) {\n            numdelims++;\n            this.pos++;\n        }\n    }\n\n    if (numdelims === 0) {\n        return null;\n    }\n\n    char_before = startpos === 0 ? \"\\n\" : this.subject.charAt(startpos - 1);\n\n    cc_after = this.peek();\n    if (cc_after === -1) {\n        char_after = \"\\n\";\n    } else {\n        char_after = fromCodePoint(cc_after);\n    }\n\n    after_is_whitespace = reUnicodeWhitespaceChar.test(char_after);\n    after_is_punctuation = rePunctuation.test(char_after);\n    before_is_whitespace = reUnicodeWhitespaceChar.test(char_before);\n    before_is_punctuation = rePunctuation.test(char_before);\n\n    left_flanking =\n        !after_is_whitespace &&\n        (!after_is_punctuation ||\n            before_is_whitespace ||\n            before_is_punctuation);\n    right_flanking =\n        !before_is_whitespace &&\n        (!before_is_punctuation || after_is_whitespace || after_is_punctuation);\n    if (cc === C_UNDERSCORE) {\n        can_open = left_flanking && (!right_flanking || before_is_punctuation);\n        can_close = right_flanking && (!left_flanking || after_is_punctuation);\n    } else if (cc === C_SINGLEQUOTE || cc === C_DOUBLEQUOTE) {\n        can_open = left_flanking && !right_flanking;\n        can_close = right_flanking;\n    } else {\n        can_open = left_flanking;\n        can_close = right_flanking;\n    }\n    this.pos = startpos;\n    return { numdelims: numdelims, can_open: can_open, can_close: can_close };\n};\n\n// Handle a delimiter marker for emphasis or a quote.\nvar handleDelim = function(cc, block) {\n    var res = this.scanDelims(cc);\n    if (!res) {\n        return false;\n    }\n    var numdelims = res.numdelims;\n    var startpos = this.pos;\n    var contents;\n\n    this.pos += numdelims;\n    if (cc === C_SINGLEQUOTE) {\n        contents = \"\\u2019\";\n    } else if (cc === C_DOUBLEQUOTE) {\n        contents = \"\\u201C\";\n    } else {\n        contents = this.subject.slice(startpos, this.pos);\n    }\n    var node = text(contents);\n    block.appendChild(node);\n\n    // Add entry to stack for this opener\n    if (\n        (res.can_open || res.can_close) &&\n        (this.options.smart || (cc !== C_SINGLEQUOTE && cc !== C_DOUBLEQUOTE))\n    ) {\n        this.delimiters = {\n            cc: cc,\n            numdelims: numdelims,\n            origdelims: numdelims,\n            node: node,\n            previous: this.delimiters,\n            next: null,\n            can_open: res.can_open,\n            can_close: res.can_close\n        };\n        if (this.delimiters.previous !== null) {\n            this.delimiters.previous.next = this.delimiters;\n        }\n    }\n\n    return true;\n};\n\nvar removeDelimiter = function(delim) {\n    if (delim.previous !== null) {\n        delim.previous.next = delim.next;\n    }\n    if (delim.next === null) {\n        // top of stack\n        this.delimiters = delim.previous;\n    } else {\n        delim.next.previous = delim.previous;\n    }\n};\n\nvar removeDelimitersBetween = function(bottom, top) {\n    if (bottom.next !== top) {\n        bottom.next = top;\n        top.previous = bottom;\n    }\n};\n\nvar processEmphasis = function(stack_bottom) {\n    var opener, closer, old_closer;\n    var opener_inl, closer_inl;\n    var tempstack;\n    var use_delims;\n    var tmp, next;\n    var opener_found;\n    var openers_bottom = [[], [], []];\n    var odd_match = false;\n\n    for (var i = 0; i < 3; i++) {\n        openers_bottom[i][C_UNDERSCORE] = stack_bottom;\n        openers_bottom[i][C_ASTERISK] = stack_bottom;\n        openers_bottom[i][C_SINGLEQUOTE] = stack_bottom;\n        openers_bottom[i][C_DOUBLEQUOTE] = stack_bottom;\n    }\n    // find first closer above stack_bottom:\n    closer = this.delimiters;\n    while (closer !== null && closer.previous !== stack_bottom) {\n        closer = closer.previous;\n    }\n    // move forward, looking for closers, and handling each\n    while (closer !== null) {\n        var closercc = closer.cc;\n        if (!closer.can_close) {\n            closer = closer.next;\n        } else {\n            // found emphasis closer. now look back for first matching opener:\n            opener = closer.previous;\n            opener_found = false;\n            while (\n                opener !== null &&\n                opener !== stack_bottom &&\n                opener !== openers_bottom[closer.origdelims % 3][closercc]\n            ) {\n                odd_match =\n                    (closer.can_open || opener.can_close) &&\n                    closer.origdelims % 3 !== 0 &&\n                    (opener.origdelims + closer.origdelims) % 3 === 0;\n                if (opener.cc === closer.cc && opener.can_open && !odd_match) {\n                    opener_found = true;\n                    break;\n                }\n                opener = opener.previous;\n            }\n            old_closer = closer;\n\n            if (closercc === C_ASTERISK || closercc === C_UNDERSCORE) {\n                if (!opener_found) {\n                    closer = closer.next;\n                } else {\n                    // calculate actual number of delimiters used from closer\n                    use_delims =\n                        closer.numdelims >= 2 && opener.numdelims >= 2 ? 2 : 1;\n\n                    opener_inl = opener.node;\n                    closer_inl = closer.node;\n\n                    // remove used delimiters from stack elts and inlines\n                    opener.numdelims -= use_delims;\n                    closer.numdelims -= use_delims;\n                    opener_inl._literal = opener_inl._literal.slice(\n                        0,\n                        opener_inl._literal.length - use_delims\n                    );\n                    closer_inl._literal = closer_inl._literal.slice(\n                        0,\n                        closer_inl._literal.length - use_delims\n                    );\n\n                    // build contents for new emph element\n                    var emph = new Node(use_delims === 1 ? \"emph\" : \"strong\");\n\n                    tmp = opener_inl._next;\n                    while (tmp && tmp !== closer_inl) {\n                        next = tmp._next;\n                        tmp.unlink();\n                        emph.appendChild(tmp);\n                        tmp = next;\n                    }\n\n                    opener_inl.insertAfter(emph);\n\n                    // remove elts between opener and closer in delimiters stack\n                    removeDelimitersBetween(opener, closer);\n\n                    // if opener has 0 delims, remove it and the inline\n                    if (opener.numdelims === 0) {\n                        opener_inl.unlink();\n                        this.removeDelimiter(opener);\n                    }\n\n                    if (closer.numdelims === 0) {\n                        closer_inl.unlink();\n                        tempstack = closer.next;\n                        this.removeDelimiter(closer);\n                        closer = tempstack;\n                    }\n                }\n            } else if (closercc === C_SINGLEQUOTE) {\n                closer.node._literal = \"\\u2019\";\n                if (opener_found) {\n                    opener.node._literal = \"\\u2018\";\n                }\n                closer = closer.next;\n            } else if (closercc === C_DOUBLEQUOTE) {\n                closer.node._literal = \"\\u201D\";\n                if (opener_found) {\n                    opener.node.literal = \"\\u201C\";\n                }\n                closer = closer.next;\n            }\n            if (!opener_found) {\n                // Set lower bound for future searches for openers:\n                openers_bottom[old_closer.origdelims % 3][closercc] =\n                    old_closer.previous;\n                if (!old_closer.can_open) {\n                    // We can remove a closer that can't be an opener,\n                    // once we've seen there's no matching opener:\n                    this.removeDelimiter(old_closer);\n                }\n            }\n        }\n    }\n\n    // remove all delimiters\n    while (this.delimiters !== null && this.delimiters !== stack_bottom) {\n        this.removeDelimiter(this.delimiters);\n    }\n};\n\n// Attempt to parse link title (sans quotes), returning the string\n// or null if no match.\nvar parseLinkTitle = function() {\n    var title = this.match(reLinkTitle);\n    if (title === null) {\n        return null;\n    } else {\n        // chop off quotes from title and unescape:\n        return unescapeString(title.substr(1, title.length - 2));\n    }\n};\n\n// Attempt to parse link destination, returning the string or\n// null if no match.\nvar parseLinkDestination = function() {\n    var res = this.match(reLinkDestinationBraces);\n    if (res === null) {\n        if (this.peek() === C_LESSTHAN) {\n            return null;\n        }\n        // TODO handrolled parser; res should be null or the string\n        var savepos = this.pos;\n        var openparens = 0;\n        var c;\n        while ((c = this.peek()) !== -1) {\n            if (\n                c === C_BACKSLASH &&\n                reEscapable.test(this.subject.charAt(this.pos + 1))\n            ) {\n                this.pos += 1;\n                if (this.peek() !== -1) {\n                    this.pos += 1;\n                }\n            } else if (c === C_OPEN_PAREN) {\n                this.pos += 1;\n                openparens += 1;\n            } else if (c === C_CLOSE_PAREN) {\n                if (openparens < 1) {\n                    break;\n                } else {\n                    this.pos += 1;\n                    openparens -= 1;\n                }\n            } else if (reWhitespaceChar.exec(fromCodePoint(c)) !== null) {\n                break;\n            } else {\n                this.pos += 1;\n            }\n        }\n        if (this.pos === savepos && c !== C_CLOSE_PAREN) {\n            return null;\n        }\n        if (openparens !== 0) {\n            return null;\n        }\n        res = this.subject.substr(savepos, this.pos - savepos);\n        return normalizeURI(unescapeString(res));\n    } else {\n        // chop off surrounding <..>:\n        return normalizeURI(unescapeString(res.substr(1, res.length - 2)));\n    }\n};\n\n// Attempt to parse a link label, returning number of characters parsed.\nvar parseLinkLabel = function() {\n    var m = this.match(reLinkLabel);\n    if (m === null || m.length > 1001) {\n        return 0;\n    } else {\n        return m.length;\n    }\n};\n\n// Add open bracket to delimiter stack and add a text node to block's children.\nvar parseOpenBracket = function(block) {\n    var startpos = this.pos;\n    this.pos += 1;\n\n    var node = text(\"[\");\n    block.appendChild(node);\n\n    // Add entry to stack for this opener\n    this.addBracket(node, startpos, false);\n    return true;\n};\n\n// IF next character is [, and ! delimiter to delimiter stack and\n// add a text node to block's children.  Otherwise just add a text node.\nvar parseBang = function(block) {\n    var startpos = this.pos;\n    this.pos += 1;\n    if (this.peek() === C_OPEN_BRACKET) {\n        this.pos += 1;\n\n        var node = text(\"![\");\n        block.appendChild(node);\n\n        // Add entry to stack for this opener\n        this.addBracket(node, startpos + 1, true);\n    } else {\n        block.appendChild(text(\"!\"));\n    }\n    return true;\n};\n\n// Try to match close bracket against an opening in the delimiter\n// stack.  Add either a link or image, or a plain [ character,\n// to block's children.  If there is a matching delimiter,\n// remove it from the delimiter stack.\nvar parseCloseBracket = function(block) {\n    var startpos;\n    var is_image;\n    var dest;\n    var title;\n    var matched = false;\n    var reflabel;\n    var opener;\n\n    this.pos += 1;\n    startpos = this.pos;\n\n    // get last [ or ![\n    opener = this.brackets;\n\n    if (opener === null) {\n        // no matched opener, just return a literal\n        block.appendChild(text(\"]\"));\n        return true;\n    }\n\n    if (!opener.active) {\n        // no matched opener, just return a literal\n        block.appendChild(text(\"]\"));\n        // take opener off brackets stack\n        this.removeBracket();\n        return true;\n    }\n\n    // If we got here, open is a potential opener\n    is_image = opener.image;\n\n    // Check to see if we have a link/image\n\n    var savepos = this.pos;\n\n    // Inline link?\n    if (this.peek() === C_OPEN_PAREN) {\n        this.pos++;\n        if (\n            this.spnl() &&\n            (dest = this.parseLinkDestination()) !== null &&\n            this.spnl() &&\n            // make sure there's a space before the title:\n            ((reWhitespaceChar.test(this.subject.charAt(this.pos - 1)) &&\n                (title = this.parseLinkTitle())) ||\n                true) &&\n            this.spnl() &&\n            this.peek() === C_CLOSE_PAREN\n        ) {\n            this.pos += 1;\n            matched = true;\n        } else {\n            this.pos = savepos;\n        }\n    }\n\n    if (!matched) {\n        // Next, see if there's a link label\n        var beforelabel = this.pos;\n        var n = this.parseLinkLabel();\n        if (n > 2) {\n            reflabel = this.subject.slice(beforelabel, beforelabel + n);\n        } else if (!opener.bracketAfter) {\n            // Empty or missing second label means to use the first label as the reference.\n            // The reference must not contain a bracket. If we know there's a bracket, we don't even bother checking it.\n            reflabel = this.subject.slice(opener.index, startpos);\n        }\n        if (n === 0) {\n            // If shortcut reference link, rewind before spaces we skipped.\n            this.pos = savepos;\n        }\n\n        if (reflabel) {\n            // lookup rawlabel in refmap\n            var link = this.refmap[normalizeReference(reflabel)];\n            if (link) {\n                dest = link.destination;\n                title = link.title;\n                matched = true;\n            }\n        }\n    }\n\n    if (matched) {\n        var node = new Node(is_image ? \"image\" : \"link\");\n        node._destination = dest;\n        node._title = title || \"\";\n\n        var tmp, next;\n        tmp = opener.node._next;\n        while (tmp) {\n            next = tmp._next;\n            tmp.unlink();\n            node.appendChild(tmp);\n            tmp = next;\n        }\n        block.appendChild(node);\n        this.processEmphasis(opener.previousDelimiter);\n        this.removeBracket();\n        opener.node.unlink();\n\n        // We remove this bracket and processEmphasis will remove later delimiters.\n        // Now, for a link, we also deactivate earlier link openers.\n        // (no links in links)\n        if (!is_image) {\n            opener = this.brackets;\n            while (opener !== null) {\n                if (!opener.image) {\n                    opener.active = false; // deactivate this opener\n                }\n                opener = opener.previous;\n            }\n        }\n\n        return true;\n    } else {\n        // no match\n\n        this.removeBracket(); // remove this opener from stack\n        this.pos = startpos;\n        block.appendChild(text(\"]\"));\n        return true;\n    }\n};\n\nvar addBracket = function(node, index, image) {\n    if (this.brackets !== null) {\n        this.brackets.bracketAfter = true;\n    }\n    this.brackets = {\n        node: node,\n        previous: this.brackets,\n        previousDelimiter: this.delimiters,\n        index: index,\n        image: image,\n        active: true\n    };\n};\n\nvar removeBracket = function() {\n    this.brackets = this.brackets.previous;\n};\n\n// Attempt to parse an entity.\nvar parseEntity = function(block) {\n    var m;\n    if ((m = this.match(reEntityHere))) {\n        block.appendChild(text(decodeHTML(m)));\n        return true;\n    } else {\n        return false;\n    }\n};\n\n// Parse a run of ordinary characters, or a single character with\n// a special meaning in markdown, as a plain string.\nvar parseString = function(block) {\n    var m;\n    if ((m = this.match(reMain))) {\n        if (this.options.smart) {\n            block.appendChild(\n                text(\n                    m\n                        .replace(reEllipses, \"\\u2026\")\n                        .replace(reDash, function(chars) {\n                            var enCount = 0;\n                            var emCount = 0;\n                            if (chars.length % 3 === 0) {\n                                // If divisible by 3, use all em dashes\n                                emCount = chars.length / 3;\n                            } else if (chars.length % 2 === 0) {\n                                // If divisible by 2, use all en dashes\n                                enCount = chars.length / 2;\n                            } else if (chars.length % 3 === 2) {\n                                // If 2 extra dashes, use en dash for last 2; em dashes for rest\n                                enCount = 1;\n                                emCount = (chars.length - 2) / 3;\n                            } else {\n                                // Use en dashes for last 4 hyphens; em dashes for rest\n                                enCount = 2;\n                                emCount = (chars.length - 4) / 3;\n                            }\n                            return (\n                                \"\\u2014\".repeat(emCount) +\n                                \"\\u2013\".repeat(enCount)\n                            );\n                        })\n                )\n            );\n        } else {\n            block.appendChild(text(m));\n        }\n        return true;\n    } else {\n        return false;\n    }\n};\n\n// Parse a newline.  If it was preceded by two spaces, return a hard\n// line break; otherwise a soft line break.\nvar parseNewline = function(block) {\n    this.pos += 1; // assume we're at a \\n\n    // check previous node for trailing spaces\n    var lastc = block._lastChild;\n    if (\n        lastc &&\n        lastc.type === \"text\" &&\n        lastc._literal[lastc._literal.length - 1] === \" \"\n    ) {\n        var hardbreak = lastc._literal[lastc._literal.length - 2] === \" \";\n        lastc._literal = lastc._literal.replace(reFinalSpace, \"\");\n        block.appendChild(new Node(hardbreak ? \"linebreak\" : \"softbreak\"));\n    } else {\n        block.appendChild(new Node(\"softbreak\"));\n    }\n    this.match(reInitialSpace); // gobble leading spaces in next line\n    return true;\n};\n\n// Attempt to parse a link reference, modifying refmap.\nvar parseReference = function(s, refmap) {\n    this.subject = s;\n    this.pos = 0;\n    var rawlabel;\n    var dest;\n    var title;\n    var matchChars;\n    var startpos = this.pos;\n\n    // label:\n    matchChars = this.parseLinkLabel();\n    if (matchChars === 0) {\n        return 0;\n    } else {\n        rawlabel = this.subject.substr(0, matchChars);\n    }\n\n    // colon:\n    if (this.peek() === C_COLON) {\n        this.pos++;\n    } else {\n        this.pos = startpos;\n        return 0;\n    }\n\n    //  link url\n    this.spnl();\n\n    dest = this.parseLinkDestination();\n    if (dest === null) {\n        this.pos = startpos;\n        return 0;\n    }\n\n    var beforetitle = this.pos;\n    this.spnl();\n    if (this.pos !== beforetitle) {\n        title = this.parseLinkTitle();\n    }\n    if (title === null) {\n        title = \"\";\n        // rewind before spaces\n        this.pos = beforetitle;\n    }\n\n    // make sure we're at line end:\n    var atLineEnd = true;\n    if (this.match(reSpaceAtEndOfLine) === null) {\n        if (title === \"\") {\n            atLineEnd = false;\n        } else {\n            // the potential title we found is not at the line end,\n            // but it could still be a legal link reference if we\n            // discard the title\n            title = \"\";\n            // rewind before spaces\n            this.pos = beforetitle;\n            // and instead check if the link URL is at the line end\n            atLineEnd = this.match(reSpaceAtEndOfLine) !== null;\n        }\n    }\n\n    if (!atLineEnd) {\n        this.pos = startpos;\n        return 0;\n    }\n\n    var normlabel = normalizeReference(rawlabel);\n    if (normlabel === \"\") {\n        // label must contain non-whitespace characters\n        this.pos = startpos;\n        return 0;\n    }\n\n    if (!refmap[normlabel]) {\n        refmap[normlabel] = { destination: dest, title: title };\n    }\n    return this.pos - startpos;\n};\n\n// Parse the next inline element in subject, advancing subject position.\n// On success, add the result to block's children and return true.\n// On failure, return false.\nvar parseInline = function(block) {\n    var res = false;\n    var c = this.peek();\n    if (c === -1) {\n        return false;\n    }\n    switch (c) {\n        case C_NEWLINE:\n            res = this.parseNewline(block);\n            break;\n        case C_BACKSLASH:\n            res = this.parseBackslash(block);\n            break;\n        case C_BACKTICK:\n            res = this.parseBackticks(block);\n            break;\n        case C_ASTERISK:\n        case C_UNDERSCORE:\n            res = this.handleDelim(c, block);\n            break;\n        case C_SINGLEQUOTE:\n        case C_DOUBLEQUOTE:\n            res = this.options.smart && this.handleDelim(c, block);\n            break;\n        case C_OPEN_BRACKET:\n            res = this.parseOpenBracket(block);\n            break;\n        case C_BANG:\n            res = this.parseBang(block);\n            break;\n        case C_CLOSE_BRACKET:\n            res = this.parseCloseBracket(block);\n            break;\n        case C_LESSTHAN:\n            res = this.parseAutolink(block) || this.parseHtmlTag(block);\n            break;\n        case C_AMPERSAND:\n            res = this.parseEntity(block);\n            break;\n        default:\n            res = this.parseString(block);\n            break;\n    }\n    if (!res) {\n        this.pos += 1;\n        block.appendChild(text(fromCodePoint(c)));\n    }\n\n    return true;\n};\n\n// Parse string content in block into inline children,\n// using refmap to resolve references.\nvar parseInlines = function(block) {\n    this.subject = block._string_content.trim();\n    this.pos = 0;\n    this.delimiters = null;\n    this.brackets = null;\n    while (this.parseInline(block)) {}\n    block._string_content = null; // allow raw string to be garbage collected\n    this.processEmphasis(null);\n};\n\n// The InlineParser object.\nfunction InlineParser(options) {\n    return {\n        subject: \"\",\n        delimiters: null, // used by handleDelim method\n        brackets: null,\n        pos: 0,\n        refmap: {},\n        match: match,\n        peek: peek,\n        spnl: spnl,\n        parseBackticks: parseBackticks,\n        parseBackslash: parseBackslash,\n        parseAutolink: parseAutolink,\n        parseHtmlTag: parseHtmlTag,\n        scanDelims: scanDelims,\n        handleDelim: handleDelim,\n        parseLinkTitle: parseLinkTitle,\n        parseLinkDestination: parseLinkDestination,\n        parseLinkLabel: parseLinkLabel,\n        parseOpenBracket: parseOpenBracket,\n        parseBang: parseBang,\n        parseCloseBracket: parseCloseBracket,\n        addBracket: addBracket,\n        removeBracket: removeBracket,\n        parseEntity: parseEntity,\n        parseString: parseString,\n        parseNewline: parseNewline,\n        parseReference: parseReference,\n        parseInline: parseInline,\n        processEmphasis: processEmphasis,\n        removeDelimiter: removeDelimiter,\n        options: options || {},\n        parse: parseInlines\n    };\n}\n\nexport default InlineParser;\n","\"use strict\";\n\nimport Node from \"./node.js\";\nimport { unescapeString, OPENTAG, CLOSETAG } from \"./common.js\";\nimport InlineParser from \"./inlines.js\";\n\nvar CODE_INDENT = 4;\n\nvar C_TAB = 9;\nvar C_NEWLINE = 10;\nvar C_GREATERTHAN = 62;\nvar C_LESSTHAN = 60;\nvar C_SPACE = 32;\nvar C_OPEN_BRACKET = 91;\n\nvar reHtmlBlockOpen = [\n    /./, // dummy for 0\n    /^<(?:script|pre|textarea|style)(?:\\s|>|$)/i,\n    /^<!--/,\n    /^<[?]/,\n    /^<![A-Z]/,\n    /^<!\\[CDATA\\[/,\n    /^<[/]?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[123456]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|[/]?[>]|$)/i,\n    new RegExp(\"^(?:\" + OPENTAG + \"|\" + CLOSETAG + \")\\\\s*$\", \"i\")\n];\n\nvar reHtmlBlockClose = [\n    /./, // dummy for 0\n    /<\\/(?:script|pre|textarea|style)>/i,\n    /-->/,\n    /\\?>/,\n    />/,\n    /\\]\\]>/\n];\n\nvar reThematicBreak = /^(?:(?:\\*[ \\t]*){3,}|(?:_[ \\t]*){3,}|(?:-[ \\t]*){3,})[ \\t]*$/;\n\nvar reMaybeSpecial = /^[#`~*+_=<>0-9-]/;\n\nvar reNonSpace = /[^ \\t\\f\\v\\r\\n]/;\n\nvar reBulletListMarker = /^[*+-]/;\n\nvar reOrderedListMarker = /^(\\d{1,9})([.)])/;\n\nvar reATXHeadingMarker = /^#{1,6}(?:[ \\t]+|$)/;\n\nvar reCodeFence = /^`{3,}(?!.*`)|^~{3,}/;\n\nvar reClosingCodeFence = /^(?:`{3,}|~{3,})(?= *$)/;\n\nvar reSetextHeadingLine = /^(?:=+|-+)[ \\t]*$/;\n\nvar reLineEnding = /\\r\\n|\\n|\\r/;\n\n// Returns true if string contains only space characters.\nvar isBlank = function(s) {\n    return !reNonSpace.test(s);\n};\n\nvar isSpaceOrTab = function(c) {\n    return c === C_SPACE || c === C_TAB;\n};\n\nvar peek = function(ln, pos) {\n    if (pos < ln.length) {\n        return ln.charCodeAt(pos);\n    } else {\n        return -1;\n    }\n};\n\n// DOC PARSER\n\n// These are methods of a Parser object, defined below.\n\n// Returns true if block ends with a blank line, descending if needed\n// into lists and sublists.\nvar endsWithBlankLine = function(block) {\n    while (block) {\n        if (block._lastLineBlank) {\n            return true;\n        }\n        var t = block.type;\n        if (!block._lastLineChecked && (t === \"list\" || t === \"item\")) {\n            block._lastLineChecked = true;\n            block = block._lastChild;\n        } else {\n            block._lastLineChecked = true;\n            break;\n        }\n    }\n    return false;\n};\n\n// Add a line to the block at the tip.  We assume the tip\n// can accept lines -- that check should be done before calling this.\nvar addLine = function() {\n    if (this.partiallyConsumedTab) {\n        this.offset += 1; // skip over tab\n        // add space characters:\n        var charsToTab = 4 - (this.column % 4);\n        this.tip._string_content += \" \".repeat(charsToTab);\n    }\n    this.tip._string_content += this.currentLine.slice(this.offset) + \"\\n\";\n};\n\n// Add block of type tag as a child of the tip.  If the tip can't\n// accept children, close and finalize it and try its parent,\n// and so on til we find a block that can accept children.\nvar addChild = function(tag, offset) {\n    while (!this.blocks[this.tip.type].canContain(tag)) {\n        this.finalize(this.tip, this.lineNumber - 1);\n    }\n\n    var column_number = offset + 1; // offset 0 = column 1\n    var newBlock = new Node(tag, [\n        [this.lineNumber, column_number],\n        [0, 0]\n    ]);\n    newBlock._string_content = \"\";\n    this.tip.appendChild(newBlock);\n    this.tip = newBlock;\n    return newBlock;\n};\n\n// Parse a list marker and return data on the marker (type,\n// start, delimiter, bullet character, padding) or null.\nvar parseListMarker = function(parser, container) {\n    var rest = parser.currentLine.slice(parser.nextNonspace);\n    var match;\n    var nextc;\n    var spacesStartCol;\n    var spacesStartOffset;\n    var data = {\n        type: null,\n        tight: true, // lists are tight by default\n        bulletChar: null,\n        start: null,\n        delimiter: null,\n        padding: null,\n        markerOffset: parser.indent\n    };\n    if (parser.indent >= 4) {\n        return null;\n    }\n    if ((match = rest.match(reBulletListMarker))) {\n        data.type = \"bullet\";\n        data.bulletChar = match[0][0];\n    } else if (\n        (match = rest.match(reOrderedListMarker)) &&\n        (container.type !== \"paragraph\" || match[1] === \"1\")\n    ) {\n        data.type = \"ordered\";\n        data.start = parseInt(match[1]);\n        data.delimiter = match[2];\n    } else {\n        return null;\n    }\n    // make sure we have spaces after\n    nextc = peek(parser.currentLine, parser.nextNonspace + match[0].length);\n    if (!(nextc === -1 || nextc === C_TAB || nextc === C_SPACE)) {\n        return null;\n    }\n\n    // if it interrupts paragraph, make sure first line isn't blank\n    if (\n        container.type === \"paragraph\" &&\n        !parser.currentLine\n            .slice(parser.nextNonspace + match[0].length)\n            .match(reNonSpace)\n    ) {\n        return null;\n    }\n\n    // we've got a match! advance offset and calculate padding\n    parser.advanceNextNonspace(); // to start of marker\n    parser.advanceOffset(match[0].length, true); // to end of marker\n    spacesStartCol = parser.column;\n    spacesStartOffset = parser.offset;\n    do {\n        parser.advanceOffset(1, true);\n        nextc = peek(parser.currentLine, parser.offset);\n    } while (parser.column - spacesStartCol < 5 && isSpaceOrTab(nextc));\n    var blank_item = peek(parser.currentLine, parser.offset) === -1;\n    var spaces_after_marker = parser.column - spacesStartCol;\n    if (spaces_after_marker >= 5 || spaces_after_marker < 1 || blank_item) {\n        data.padding = match[0].length + 1;\n        parser.column = spacesStartCol;\n        parser.offset = spacesStartOffset;\n        if (isSpaceOrTab(peek(parser.currentLine, parser.offset))) {\n            parser.advanceOffset(1, true);\n        }\n    } else {\n        data.padding = match[0].length + spaces_after_marker;\n    }\n    return data;\n};\n\n// Returns true if the two list items are of the same type,\n// with the same delimiter and bullet character.  This is used\n// in agglomerating list items into lists.\nvar listsMatch = function(list_data, item_data) {\n    return (\n        list_data.type === item_data.type &&\n        list_data.delimiter === item_data.delimiter &&\n        list_data.bulletChar === item_data.bulletChar\n    );\n};\n\n// Finalize and close any unmatched blocks.\nvar closeUnmatchedBlocks = function() {\n    if (!this.allClosed) {\n        // finalize any blocks not matched\n        while (this.oldtip !== this.lastMatchedContainer) {\n            var parent = this.oldtip._parent;\n            this.finalize(this.oldtip, this.lineNumber - 1);\n            this.oldtip = parent;\n        }\n        this.allClosed = true;\n    }\n};\n\n// 'finalize' is run when the block is closed.\n// 'continue' is run to check whether the block is continuing\n// at a certain line and offset (e.g. whether a block quote\n// contains a `>`.  It returns 0 for matched, 1 for not matched,\n// and 2 for \"we've dealt with this line completely, go to next.\"\nvar blocks = {\n    document: {\n        continue: function() {\n            return 0;\n        },\n        finalize: function() {\n            return;\n        },\n        canContain: function(t) {\n            return t !== \"item\";\n        },\n        acceptsLines: false\n    },\n    list: {\n        continue: function() {\n            return 0;\n        },\n        finalize: function(parser, block) {\n            var item = block._firstChild;\n            while (item) {\n                // check for non-final list item ending with blank line:\n                if (endsWithBlankLine(item) && item._next) {\n                    block._listData.tight = false;\n                    break;\n                }\n                // recurse into children of list item, to see if there are\n                // spaces between any of them:\n                var subitem = item._firstChild;\n                while (subitem) {\n                    if (\n                        endsWithBlankLine(subitem) &&\n                        (item._next || subitem._next)\n                    ) {\n                        block._listData.tight = false;\n                        break;\n                    }\n                    subitem = subitem._next;\n                }\n                item = item._next;\n            }\n        },\n        canContain: function(t) {\n            return t === \"item\";\n        },\n        acceptsLines: false\n    },\n    block_quote: {\n        continue: function(parser) {\n            var ln = parser.currentLine;\n            if (\n                !parser.indented &&\n                peek(ln, parser.nextNonspace) === C_GREATERTHAN\n            ) {\n                parser.advanceNextNonspace();\n                parser.advanceOffset(1, false);\n                if (isSpaceOrTab(peek(ln, parser.offset))) {\n                    parser.advanceOffset(1, true);\n                }\n            } else {\n                return 1;\n            }\n            return 0;\n        },\n        finalize: function() {\n            return;\n        },\n        canContain: function(t) {\n            return t !== \"item\";\n        },\n        acceptsLines: false\n    },\n    item: {\n        continue: function(parser, container) {\n            if (parser.blank) {\n                if (container._firstChild == null) {\n                    // Blank line after empty list item\n                    return 1;\n                } else {\n                    parser.advanceNextNonspace();\n                }\n            } else if (\n                parser.indent >=\n                container._listData.markerOffset + container._listData.padding\n            ) {\n                parser.advanceOffset(\n                    container._listData.markerOffset +\n                        container._listData.padding,\n                    true\n                );\n            } else {\n                return 1;\n            }\n            return 0;\n        },\n        finalize: function() {\n            return;\n        },\n        canContain: function(t) {\n            return t !== \"item\";\n        },\n        acceptsLines: false\n    },\n    heading: {\n        continue: function() {\n            // a heading can never container > 1 line, so fail to match:\n            return 1;\n        },\n        finalize: function() {\n            return;\n        },\n        canContain: function() {\n            return false;\n        },\n        acceptsLines: false\n    },\n    thematic_break: {\n        continue: function() {\n            // a thematic break can never container > 1 line, so fail to match:\n            return 1;\n        },\n        finalize: function() {\n            return;\n        },\n        canContain: function() {\n            return false;\n        },\n        acceptsLines: false\n    },\n    code_block: {\n        continue: function(parser, container) {\n            var ln = parser.currentLine;\n            var indent = parser.indent;\n            if (container._isFenced) {\n                // fenced\n                var match =\n                    indent <= 3 &&\n                    ln.charAt(parser.nextNonspace) === container._fenceChar &&\n                    ln.slice(parser.nextNonspace).match(reClosingCodeFence);\n                if (match && match[0].length >= container._fenceLength) {\n                    // closing fence - we're at end of line, so we can return\n                    parser.lastLineLength =\n                        parser.offset + indent + match[0].length;\n                    parser.finalize(container, parser.lineNumber);\n                    return 2;\n                } else {\n                    // skip optional spaces of fence offset\n                    var i = container._fenceOffset;\n                    while (i > 0 && isSpaceOrTab(peek(ln, parser.offset))) {\n                        parser.advanceOffset(1, true);\n                        i--;\n                    }\n                }\n            } else {\n                // indented\n                if (indent >= CODE_INDENT) {\n                    parser.advanceOffset(CODE_INDENT, true);\n                } else if (parser.blank) {\n                    parser.advanceNextNonspace();\n                } else {\n                    return 1;\n                }\n            }\n            return 0;\n        },\n        finalize: function(parser, block) {\n            if (block._isFenced) {\n                // fenced\n                // first line becomes info string\n                var content = block._string_content;\n                var newlinePos = content.indexOf(\"\\n\");\n                var firstLine = content.slice(0, newlinePos);\n                var rest = content.slice(newlinePos + 1);\n                block.info = unescapeString(firstLine.trim());\n                block._literal = rest;\n            } else {\n                // indented\n                block._literal = block._string_content.replace(\n                    /(\\n *)+$/,\n                    \"\\n\"\n                );\n            }\n            block._string_content = null; // allow GC\n        },\n        canContain: function() {\n            return false;\n        },\n        acceptsLines: true\n    },\n    html_block: {\n        continue: function(parser, container) {\n            return parser.blank &&\n                (container._htmlBlockType === 6 ||\n                    container._htmlBlockType === 7)\n                ? 1\n                : 0;\n        },\n        finalize: function(parser, block) {\n            block._literal = block._string_content.replace(/(\\n *)+$/, \"\");\n            block._string_content = null; // allow GC\n        },\n        canContain: function() {\n            return false;\n        },\n        acceptsLines: true\n    },\n    paragraph: {\n        continue: function(parser) {\n            return parser.blank ? 1 : 0;\n        },\n        finalize: function(parser, block) {\n            var pos;\n            var hasReferenceDefs = false;\n\n            // try parsing the beginning as link reference definitions:\n            while (\n                peek(block._string_content, 0) === C_OPEN_BRACKET &&\n                (pos = parser.inlineParser.parseReference(\n                    block._string_content,\n                    parser.refmap\n                ))\n            ) {\n                block._string_content = block._string_content.slice(pos);\n                hasReferenceDefs = true;\n            }\n            if (hasReferenceDefs && isBlank(block._string_content)) {\n                block.unlink();\n            }\n        },\n        canContain: function() {\n            return false;\n        },\n        acceptsLines: true\n    }\n};\n\n// block start functions.  Return values:\n// 0 = no match\n// 1 = matched container, keep going\n// 2 = matched leaf, no more block starts\nvar blockStarts = [\n    // block quote\n    function(parser) {\n        if (\n            !parser.indented &&\n            peek(parser.currentLine, parser.nextNonspace) === C_GREATERTHAN\n        ) {\n            parser.advanceNextNonspace();\n            parser.advanceOffset(1, false);\n            // optional following space\n            if (isSpaceOrTab(peek(parser.currentLine, parser.offset))) {\n                parser.advanceOffset(1, true);\n            }\n            parser.closeUnmatchedBlocks();\n            parser.addChild(\"block_quote\", parser.nextNonspace);\n            return 1;\n        } else {\n            return 0;\n        }\n    },\n\n    // ATX heading\n    function(parser) {\n        var match;\n        if (\n            !parser.indented &&\n            (match = parser.currentLine\n                .slice(parser.nextNonspace)\n                .match(reATXHeadingMarker))\n        ) {\n            parser.advanceNextNonspace();\n            parser.advanceOffset(match[0].length, false);\n            parser.closeUnmatchedBlocks();\n            var container = parser.addChild(\"heading\", parser.nextNonspace);\n            container.level = match[0].trim().length; // number of #s\n            // remove trailing ###s:\n            container._string_content = parser.currentLine\n                .slice(parser.offset)\n                .replace(/^[ \\t]*#+[ \\t]*$/, \"\")\n                .replace(/[ \\t]+#+[ \\t]*$/, \"\");\n            parser.advanceOffset(parser.currentLine.length - parser.offset);\n            return 2;\n        } else {\n            return 0;\n        }\n    },\n\n    // Fenced code block\n    function(parser) {\n        var match;\n        if (\n            !parser.indented &&\n            (match = parser.currentLine\n                .slice(parser.nextNonspace)\n                .match(reCodeFence))\n        ) {\n            var fenceLength = match[0].length;\n            parser.closeUnmatchedBlocks();\n            var container = parser.addChild(\"code_block\", parser.nextNonspace);\n            container._isFenced = true;\n            container._fenceLength = fenceLength;\n            container._fenceChar = match[0][0];\n            container._fenceOffset = parser.indent;\n            parser.advanceNextNonspace();\n            parser.advanceOffset(fenceLength, false);\n            return 2;\n        } else {\n            return 0;\n        }\n    },\n\n    // HTML block\n    function(parser, container) {\n        if (\n            !parser.indented &&\n            peek(parser.currentLine, parser.nextNonspace) === C_LESSTHAN\n        ) {\n            var s = parser.currentLine.slice(parser.nextNonspace);\n            var blockType;\n\n            for (blockType = 1; blockType <= 7; blockType++) {\n                if (\n                    reHtmlBlockOpen[blockType].test(s) &&\n                    (blockType < 7 || container.type !== \"paragraph\")\n                ) {\n                    parser.closeUnmatchedBlocks();\n                    // We don't adjust parser.offset;\n                    // spaces are part of the HTML block:\n                    var b = parser.addChild(\"html_block\", parser.offset);\n                    b._htmlBlockType = blockType;\n                    return 2;\n                }\n            }\n        }\n\n        return 0;\n    },\n\n    // Setext heading\n    function(parser, container) {\n        var match;\n        if (\n            !parser.indented &&\n            container.type === \"paragraph\" &&\n            (match = parser.currentLine\n                .slice(parser.nextNonspace)\n                .match(reSetextHeadingLine))\n        ) {\n            parser.closeUnmatchedBlocks();\n            // resolve reference link definitiosn\n            var pos;\n            while (\n                peek(container._string_content, 0) === C_OPEN_BRACKET &&\n                (pos = parser.inlineParser.parseReference(\n                    container._string_content,\n                    parser.refmap\n                ))\n            ) {\n                container._string_content = container._string_content.slice(\n                    pos\n                );\n            }\n            if (container._string_content.length > 0) {\n                var heading = new Node(\"heading\", container.sourcepos);\n                heading.level = match[0][0] === \"=\" ? 1 : 2;\n                heading._string_content = container._string_content;\n                container.insertAfter(heading);\n                container.unlink();\n                parser.tip = heading;\n                parser.advanceOffset(\n                    parser.currentLine.length - parser.offset,\n                    false\n                );\n                return 2;\n            } else {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n    },\n\n    // thematic break\n    function(parser) {\n        if (\n            !parser.indented &&\n            reThematicBreak.test(parser.currentLine.slice(parser.nextNonspace))\n        ) {\n            parser.closeUnmatchedBlocks();\n            parser.addChild(\"thematic_break\", parser.nextNonspace);\n            parser.advanceOffset(\n                parser.currentLine.length - parser.offset,\n                false\n            );\n            return 2;\n        } else {\n            return 0;\n        }\n    },\n\n    // list item\n    function(parser, container) {\n        var data;\n\n        if (\n            (!parser.indented || container.type === \"list\") &&\n            (data = parseListMarker(parser, container))\n        ) {\n            parser.closeUnmatchedBlocks();\n\n            // add the list if needed\n            if (\n                parser.tip.type !== \"list\" ||\n                !listsMatch(container._listData, data)\n            ) {\n                container = parser.addChild(\"list\", parser.nextNonspace);\n                container._listData = data;\n            }\n\n            // add the list item\n            container = parser.addChild(\"item\", parser.nextNonspace);\n            container._listData = data;\n            return 1;\n        } else {\n            return 0;\n        }\n    },\n\n    // indented code block\n    function(parser) {\n        if (\n            parser.indented &&\n            parser.tip.type !== \"paragraph\" &&\n            !parser.blank\n        ) {\n            // indented code\n            parser.advanceOffset(CODE_INDENT, true);\n            parser.closeUnmatchedBlocks();\n            parser.addChild(\"code_block\", parser.offset);\n            return 2;\n        } else {\n            return 0;\n        }\n    }\n];\n\nvar advanceOffset = function(count, columns) {\n    var currentLine = this.currentLine;\n    var charsToTab, charsToAdvance;\n    var c;\n    while (count > 0 && (c = currentLine[this.offset])) {\n        if (c === \"\\t\") {\n            charsToTab = 4 - (this.column % 4);\n            if (columns) {\n                this.partiallyConsumedTab = charsToTab > count;\n                charsToAdvance = charsToTab > count ? count : charsToTab;\n                this.column += charsToAdvance;\n                this.offset += this.partiallyConsumedTab ? 0 : 1;\n                count -= charsToAdvance;\n            } else {\n                this.partiallyConsumedTab = false;\n                this.column += charsToTab;\n                this.offset += 1;\n                count -= 1;\n            }\n        } else {\n            this.partiallyConsumedTab = false;\n            this.offset += 1;\n            this.column += 1; // assume ascii; block starts are ascii\n            count -= 1;\n        }\n    }\n};\n\nvar advanceNextNonspace = function() {\n    this.offset = this.nextNonspace;\n    this.column = this.nextNonspaceColumn;\n    this.partiallyConsumedTab = false;\n};\n\nvar findNextNonspace = function() {\n    var currentLine = this.currentLine;\n    var i = this.offset;\n    var cols = this.column;\n    var c;\n\n    while ((c = currentLine.charAt(i)) !== \"\") {\n        if (c === \" \") {\n            i++;\n            cols++;\n        } else if (c === \"\\t\") {\n            i++;\n            cols += 4 - (cols % 4);\n        } else {\n            break;\n        }\n    }\n    this.blank = c === \"\\n\" || c === \"\\r\" || c === \"\";\n    this.nextNonspace = i;\n    this.nextNonspaceColumn = cols;\n    this.indent = this.nextNonspaceColumn - this.column;\n    this.indented = this.indent >= CODE_INDENT;\n};\n\n// Analyze a line of text and update the document appropriately.\n// We parse markdown text by calling this on each line of input,\n// then finalizing the document.\nvar incorporateLine = function(ln) {\n    var all_matched = true;\n    var t;\n\n    var container = this.doc;\n    this.oldtip = this.tip;\n    this.offset = 0;\n    this.column = 0;\n    this.blank = false;\n    this.partiallyConsumedTab = false;\n    this.lineNumber += 1;\n\n    // replace NUL characters for security\n    if (ln.indexOf(\"\\u0000\") !== -1) {\n        ln = ln.replace(/\\0/g, \"\\uFFFD\");\n    }\n\n    this.currentLine = ln;\n\n    // For each containing block, try to parse the associated line start.\n    // Bail out on failure: container will point to the last matching block.\n    // Set all_matched to false if not all containers match.\n    var lastChild;\n    while ((lastChild = container._lastChild) && lastChild._open) {\n        container = lastChild;\n\n        this.findNextNonspace();\n\n        switch (this.blocks[container.type].continue(this, container)) {\n            case 0: // we've matched, keep going\n                break;\n            case 1: // we've failed to match a block\n                all_matched = false;\n                break;\n            case 2: // we've hit end of line for fenced code close and can return\n                return;\n            default:\n                throw \"continue returned illegal value, must be 0, 1, or 2\";\n        }\n        if (!all_matched) {\n            container = container._parent; // back up to last matching block\n            break;\n        }\n    }\n\n    this.allClosed = container === this.oldtip;\n    this.lastMatchedContainer = container;\n\n    var matchedLeaf =\n        container.type !== \"paragraph\" && blocks[container.type].acceptsLines;\n    var starts = this.blockStarts;\n    var startsLen = starts.length;\n    // Unless last matched container is a code block, try new container starts,\n    // adding children to the last matched container:\n    while (!matchedLeaf) {\n        this.findNextNonspace();\n\n        // this is a little performance optimization:\n        if (\n            !this.indented &&\n            !reMaybeSpecial.test(ln.slice(this.nextNonspace))\n        ) {\n            this.advanceNextNonspace();\n            break;\n        }\n\n        var i = 0;\n        while (i < startsLen) {\n            var res = starts[i](this, container);\n            if (res === 1) {\n                container = this.tip;\n                break;\n            } else if (res === 2) {\n                container = this.tip;\n                matchedLeaf = true;\n                break;\n            } else {\n                i++;\n            }\n        }\n\n        if (i === startsLen) {\n            // nothing matched\n            this.advanceNextNonspace();\n            break;\n        }\n    }\n\n    // What remains at the offset is a text line.  Add the text to the\n    // appropriate container.\n\n    // First check for a lazy paragraph continuation:\n    if (!this.allClosed && !this.blank && this.tip.type === \"paragraph\") {\n        // lazy paragraph continuation\n        this.addLine();\n    } else {\n        // not a lazy continuation\n\n        // finalize any blocks not matched\n        this.closeUnmatchedBlocks();\n        if (this.blank && container.lastChild) {\n            container.lastChild._lastLineBlank = true;\n        }\n\n        t = container.type;\n\n        // Block quote lines are never blank as they start with >\n        // and we don't count blanks in fenced code for purposes of tight/loose\n        // lists or breaking out of lists.  We also don't set _lastLineBlank\n        // on an empty list item, or if we just closed a fenced block.\n        var lastLineBlank =\n            this.blank &&\n            !(\n                t === \"block_quote\" ||\n                (t === \"code_block\" && container._isFenced) ||\n                (t === \"item\" &&\n                    !container._firstChild &&\n                    container.sourcepos[0][0] === this.lineNumber)\n            );\n\n        // propagate lastLineBlank up through parents:\n        var cont = container;\n        while (cont) {\n            cont._lastLineBlank = lastLineBlank;\n            cont = cont._parent;\n        }\n\n        if (this.blocks[t].acceptsLines) {\n            this.addLine();\n            // if HtmlBlock, check for end condition\n            if (\n                t === \"html_block\" &&\n                container._htmlBlockType >= 1 &&\n                container._htmlBlockType <= 5 &&\n                reHtmlBlockClose[container._htmlBlockType].test(\n                    this.currentLine.slice(this.offset)\n                )\n            ) {\n                this.lastLineLength = ln.length;\n                this.finalize(container, this.lineNumber);\n            }\n        } else if (this.offset < ln.length && !this.blank) {\n            // create paragraph container for line\n            container = this.addChild(\"paragraph\", this.offset);\n            this.advanceNextNonspace();\n            this.addLine();\n        }\n    }\n    this.lastLineLength = ln.length;\n};\n\n// Finalize a block.  Close it and do any necessary postprocessing,\n// e.g. creating string_content from strings, setting the 'tight'\n// or 'loose' status of a list, and parsing the beginnings\n// of paragraphs for reference definitions.  Reset the tip to the\n// parent of the closed block.\nvar finalize = function(block, lineNumber) {\n    var above = block._parent;\n    block._open = false;\n    block.sourcepos[1] = [lineNumber, this.lastLineLength];\n\n    this.blocks[block.type].finalize(this, block);\n\n    this.tip = above;\n};\n\n// Walk through a block & children recursively, parsing string content\n// into inline content where appropriate.\nvar processInlines = function(block) {\n    var node, event, t;\n    var walker = block.walker();\n    this.inlineParser.refmap = this.refmap;\n    this.inlineParser.options = this.options;\n    while ((event = walker.next())) {\n        node = event.node;\n        t = node.type;\n        if (!event.entering && (t === \"paragraph\" || t === \"heading\")) {\n            this.inlineParser.parse(node);\n        }\n    }\n};\n\nvar Document = function() {\n    var doc = new Node(\"document\", [\n        [1, 1],\n        [0, 0]\n    ]);\n    return doc;\n};\n\n// The main parsing function.  Returns a parsed document AST.\nvar parse = function(input) {\n    this.doc = new Document();\n    this.tip = this.doc;\n    this.refmap = {};\n    this.lineNumber = 0;\n    this.lastLineLength = 0;\n    this.offset = 0;\n    this.column = 0;\n    this.lastMatchedContainer = this.doc;\n    this.currentLine = \"\";\n    if (this.options.time) {\n        console.time(\"preparing input\");\n    }\n    var lines = input.split(reLineEnding);\n    var len = lines.length;\n    if (input.charCodeAt(input.length - 1) === C_NEWLINE) {\n        // ignore last blank line created by final newline\n        len -= 1;\n    }\n    if (this.options.time) {\n        console.timeEnd(\"preparing input\");\n    }\n    if (this.options.time) {\n        console.time(\"block parsing\");\n    }\n    for (var i = 0; i < len; i++) {\n        this.incorporateLine(lines[i]);\n    }\n    while (this.tip) {\n        this.finalize(this.tip, len);\n    }\n    if (this.options.time) {\n        console.timeEnd(\"block parsing\");\n    }\n    if (this.options.time) {\n        console.time(\"inline parsing\");\n    }\n    this.processInlines(this.doc);\n    if (this.options.time) {\n        console.timeEnd(\"inline parsing\");\n    }\n    return this.doc;\n};\n\n// The Parser object.\nfunction Parser(options) {\n    return {\n        doc: new Document(),\n        blocks: blocks,\n        blockStarts: blockStarts,\n        tip: this.doc,\n        oldtip: this.doc,\n        currentLine: \"\",\n        lineNumber: 0,\n        offset: 0,\n        column: 0,\n        nextNonspace: 0,\n        nextNonspaceColumn: 0,\n        indent: 0,\n        indented: false,\n        blank: false,\n        partiallyConsumedTab: false,\n        allClosed: true,\n        lastMatchedContainer: this.doc,\n        refmap: {},\n        lastLineLength: 0,\n        inlineParser: new InlineParser(options),\n        findNextNonspace: findNextNonspace,\n        advanceOffset: advanceOffset,\n        advanceNextNonspace: advanceNextNonspace,\n        addLine: addLine,\n        addChild: addChild,\n        incorporateLine: incorporateLine,\n        finalize: finalize,\n        processInlines: processInlines,\n        closeUnmatchedBlocks: closeUnmatchedBlocks,\n        parse: parse,\n        options: options || {}\n    };\n}\n\nexport default Parser;\n","\"use strict\";\n\nfunction Renderer() {}\n\n/**\n *  Walks the AST and calls member methods for each Node type.\n *\n *  @param ast {Node} The root of the abstract syntax tree.\n */\nfunction render(ast) {\n    var walker = ast.walker(),\n        event,\n        type;\n\n    this.buffer = \"\";\n    this.lastOut = \"\\n\";\n\n    while ((event = walker.next())) {\n        type = event.node.type;\n        if (this[type]) {\n            this[type](event.node, event.entering);\n        }\n    }\n    return this.buffer;\n}\n\n/**\n *  Concatenate a literal string to the buffer.\n *\n *  @param str {String} The string to concatenate.\n */\nfunction lit(str) {\n    this.buffer += str;\n    this.lastOut = str;\n}\n\n/**\n *  Output a newline to the buffer.\n */\nfunction cr() {\n    if (this.lastOut !== \"\\n\") {\n        this.lit(\"\\n\");\n    }\n}\n\n/**\n *  Concatenate a string to the buffer possibly escaping the content.\n *\n *  Concrete renderer implementations should override this method.\n *\n *  @param str {String} The string to concatenate.\n */\nfunction out(str) {\n    this.lit(str);\n}\n\n/**\n *  Escape a string for the target renderer.\n *\n *  Abstract function that should be implemented by concrete\n *  renderer implementations.\n *\n *  @param str {String} The string to escape.\n */\nfunction esc(str) {\n    return str;\n}\n\nRenderer.prototype.render = render;\nRenderer.prototype.out = out;\nRenderer.prototype.lit = lit;\nRenderer.prototype.cr = cr;\nRenderer.prototype.esc = esc;\n\nexport default Renderer;\n","\"use strict\";\n\nimport { escapeXml } from \"../common.js\";\nimport Renderer from \"./renderer.js\";\n\nvar reUnsafeProtocol = /^javascript:|vbscript:|file:|data:/i;\nvar reSafeDataProtocol = /^data:image\\/(?:png|gif|jpeg|webp)/i;\n\nvar potentiallyUnsafe = function(url) {\n    return reUnsafeProtocol.test(url) && !reSafeDataProtocol.test(url);\n};\n\n// Helper function to produce an HTML tag.\nfunction tag(name, attrs, selfclosing) {\n    if (this.disableTags > 0) {\n        return;\n    }\n    this.buffer += \"<\" + name;\n    if (attrs && attrs.length > 0) {\n        var i = 0;\n        var attrib;\n        while ((attrib = attrs[i]) !== undefined) {\n            this.buffer += \" \" + attrib[0] + '=\"' + attrib[1] + '\"';\n            i++;\n        }\n    }\n    if (selfclosing) {\n        this.buffer += \" /\";\n    }\n    this.buffer += \">\";\n    this.lastOut = \">\";\n}\n\nfunction HtmlRenderer(options) {\n    options = options || {};\n    // by default, soft breaks are rendered as newlines in HTML\n    options.softbreak = options.softbreak || \"\\n\";\n    // set to \"<br />\" to make them hard breaks\n    // set to \" \" if you want to ignore line wrapping in source\n\n    this.disableTags = 0;\n    this.lastOut = \"\\n\";\n    this.options = options;\n}\n\n/* Node methods */\n\nfunction text(node) {\n    this.out(node.literal);\n}\n\nfunction softbreak() {\n    this.lit(this.options.softbreak);\n}\n\nfunction linebreak() {\n    this.tag(\"br\", [], true);\n    this.cr();\n}\n\nfunction link(node, entering) {\n    var attrs = this.attrs(node);\n    if (entering) {\n        if (!(this.options.safe && potentiallyUnsafe(node.destination))) {\n            attrs.push([\"href\", this.esc(node.destination)]);\n        }\n        if (node.title) {\n            attrs.push([\"title\", this.esc(node.title)]);\n        }\n        this.tag(\"a\", attrs);\n    } else {\n        this.tag(\"/a\");\n    }\n}\n\nfunction image(node, entering) {\n    if (entering) {\n        if (this.disableTags === 0) {\n            if (this.options.safe && potentiallyUnsafe(node.destination)) {\n                this.lit('<img src=\"\" alt=\"');\n            } else {\n                this.lit('<img src=\"' + this.esc(node.destination) + '\" alt=\"');\n            }\n        }\n        this.disableTags += 1;\n    } else {\n        this.disableTags -= 1;\n        if (this.disableTags === 0) {\n            if (node.title) {\n                this.lit('\" title=\"' + this.esc(node.title));\n            }\n            this.lit('\" />');\n        }\n    }\n}\n\nfunction emph(node, entering) {\n    this.tag(entering ? \"em\" : \"/em\");\n}\n\nfunction strong(node, entering) {\n    this.tag(entering ? \"strong\" : \"/strong\");\n}\n\nfunction paragraph(node, entering) {\n    var grandparent = node.parent.parent,\n        attrs = this.attrs(node);\n    if (grandparent !== null && grandparent.type === \"list\") {\n        if (grandparent.listTight) {\n            return;\n        }\n    }\n    if (entering) {\n        this.cr();\n        this.tag(\"p\", attrs);\n    } else {\n        this.tag(\"/p\");\n        this.cr();\n    }\n}\n\nfunction heading(node, entering) {\n    var tagname = \"h\" + node.level,\n        attrs = this.attrs(node);\n    if (entering) {\n        this.cr();\n        this.tag(tagname, attrs);\n    } else {\n        this.tag(\"/\" + tagname);\n        this.cr();\n    }\n}\n\nfunction code(node) {\n    this.tag(\"code\");\n    this.out(node.literal);\n    this.tag(\"/code\");\n}\n\nfunction code_block(node) {\n    var info_words = node.info ? node.info.split(/\\s+/) : [],\n        attrs = this.attrs(node);\n    if (info_words.length > 0 && info_words[0].length > 0) {\n        attrs.push([\"class\", \"language-\" + this.esc(info_words[0])]);\n    }\n    this.cr();\n    this.tag(\"pre\");\n    this.tag(\"code\", attrs);\n    this.out(node.literal);\n    this.tag(\"/code\");\n    this.tag(\"/pre\");\n    this.cr();\n}\n\nfunction thematic_break(node) {\n    var attrs = this.attrs(node);\n    this.cr();\n    this.tag(\"hr\", attrs, true);\n    this.cr();\n}\n\nfunction block_quote(node, entering) {\n    var attrs = this.attrs(node);\n    if (entering) {\n        this.cr();\n        this.tag(\"blockquote\", attrs);\n        this.cr();\n    } else {\n        this.cr();\n        this.tag(\"/blockquote\");\n        this.cr();\n    }\n}\n\nfunction list(node, entering) {\n    var tagname = node.listType === \"bullet\" ? \"ul\" : \"ol\",\n        attrs = this.attrs(node);\n\n    if (entering) {\n        var start = node.listStart;\n        if (start !== null && start !== 1) {\n            attrs.push([\"start\", start.toString()]);\n        }\n        this.cr();\n        this.tag(tagname, attrs);\n        this.cr();\n    } else {\n        this.cr();\n        this.tag(\"/\" + tagname);\n        this.cr();\n    }\n}\n\nfunction item(node, entering) {\n    var attrs = this.attrs(node);\n    if (entering) {\n        this.tag(\"li\", attrs);\n    } else {\n        this.tag(\"/li\");\n        this.cr();\n    }\n}\n\nfunction html_inline(node) {\n    if (this.options.safe) {\n        this.lit(\"<!-- raw HTML omitted -->\");\n    } else {\n        this.lit(node.literal);\n    }\n}\n\nfunction html_block(node) {\n    this.cr();\n    if (this.options.safe) {\n        this.lit(\"<!-- raw HTML omitted -->\");\n    } else {\n        this.lit(node.literal);\n    }\n    this.cr();\n}\n\nfunction custom_inline(node, entering) {\n    if (entering && node.onEnter) {\n        this.lit(node.onEnter);\n    } else if (!entering && node.onExit) {\n        this.lit(node.onExit);\n    }\n}\n\nfunction custom_block(node, entering) {\n    this.cr();\n    if (entering && node.onEnter) {\n        this.lit(node.onEnter);\n    } else if (!entering && node.onExit) {\n        this.lit(node.onExit);\n    }\n    this.cr();\n}\n\n/* Helper methods */\n\nfunction out(s) {\n    this.lit(this.esc(s));\n}\n\nfunction attrs(node) {\n    var att = [];\n    if (this.options.sourcepos) {\n        var pos = node.sourcepos;\n        if (pos) {\n            att.push([\n                \"data-sourcepos\",\n                String(pos[0][0]) +\n                    \":\" +\n                    String(pos[0][1]) +\n                    \"-\" +\n                    String(pos[1][0]) +\n                    \":\" +\n                    String(pos[1][1])\n            ]);\n        }\n    }\n    return att;\n}\n\n// quick browser-compatible inheritance\nHtmlRenderer.prototype = Object.create(Renderer.prototype);\n\nHtmlRenderer.prototype.text = text;\nHtmlRenderer.prototype.html_inline = html_inline;\nHtmlRenderer.prototype.html_block = html_block;\nHtmlRenderer.prototype.softbreak = softbreak;\nHtmlRenderer.prototype.linebreak = linebreak;\nHtmlRenderer.prototype.link = link;\nHtmlRenderer.prototype.image = image;\nHtmlRenderer.prototype.emph = emph;\nHtmlRenderer.prototype.strong = strong;\nHtmlRenderer.prototype.paragraph = paragraph;\nHtmlRenderer.prototype.heading = heading;\nHtmlRenderer.prototype.code = code;\nHtmlRenderer.prototype.code_block = code_block;\nHtmlRenderer.prototype.thematic_break = thematic_break;\nHtmlRenderer.prototype.block_quote = block_quote;\nHtmlRenderer.prototype.list = list;\nHtmlRenderer.prototype.item = item;\nHtmlRenderer.prototype.custom_inline = custom_inline;\nHtmlRenderer.prototype.custom_block = custom_block;\n\nHtmlRenderer.prototype.esc = escapeXml;\n\nHtmlRenderer.prototype.out = out;\nHtmlRenderer.prototype.tag = tag;\nHtmlRenderer.prototype.attrs = attrs;\n\nexport default HtmlRenderer;\n","\"use strict\";\n\nimport Renderer from \"./renderer.js\";\nimport { escapeXml } from \"../common.js\";\n\nvar reXMLTag = /\\<[^>]*\\>/;\n\nfunction toTagName(s) {\n    return s.replace(/([a-z])([A-Z])/g, \"$1_$2\").toLowerCase();\n}\n\nfunction XmlRenderer(options) {\n    options = options || {};\n\n    this.disableTags = 0;\n    this.lastOut = \"\\n\";\n\n    this.indentLevel = 0;\n    this.indent = \"  \";\n\n    this.options = options;\n}\n\nfunction render(ast) {\n    this.buffer = \"\";\n\n    var attrs;\n    var tagname;\n    var walker = ast.walker();\n    var event, node, entering;\n    var container;\n    var selfClosing;\n    var nodetype;\n\n    var options = this.options;\n\n    if (options.time) {\n        console.time(\"rendering\");\n    }\n\n    this.buffer += '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n';\n    this.buffer += '<!DOCTYPE document SYSTEM \"CommonMark.dtd\">\\n';\n\n    while ((event = walker.next())) {\n        entering = event.entering;\n        node = event.node;\n        nodetype = node.type;\n\n        container = node.isContainer;\n\n        selfClosing =\n            nodetype === \"thematic_break\" ||\n            nodetype === \"linebreak\" ||\n            nodetype === \"softbreak\";\n\n        tagname = toTagName(nodetype);\n\n        if (entering) {\n            attrs = [];\n\n            switch (nodetype) {\n                case \"document\":\n                    attrs.push([\"xmlns\", \"http://commonmark.org/xml/1.0\"]);\n                    break;\n                case \"list\":\n                    if (node.listType !== null) {\n                        attrs.push([\"type\", node.listType.toLowerCase()]);\n                    }\n                    if (node.listStart !== null) {\n                        attrs.push([\"start\", String(node.listStart)]);\n                    }\n                    if (node.listTight !== null) {\n                        attrs.push([\n                            \"tight\",\n                            node.listTight ? \"true\" : \"false\"\n                        ]);\n                    }\n                    var delim = node.listDelimiter;\n                    if (delim !== null) {\n                        var delimword = \"\";\n                        if (delim === \".\") {\n                            delimword = \"period\";\n                        } else {\n                            delimword = \"paren\";\n                        }\n                        attrs.push([\"delimiter\", delimword]);\n                    }\n                    break;\n                case \"code_block\":\n                    if (node.info) {\n                        attrs.push([\"info\", node.info]);\n                    }\n                    break;\n                case \"heading\":\n                    attrs.push([\"level\", String(node.level)]);\n                    break;\n                case \"link\":\n                case \"image\":\n                    attrs.push([\"destination\", node.destination]);\n                    attrs.push([\"title\", node.title]);\n                    break;\n                case \"custom_inline\":\n                case \"custom_block\":\n                    attrs.push([\"on_enter\", node.onEnter]);\n                    attrs.push([\"on_exit\", node.onExit]);\n                    break;\n                default:\n                    break;\n            }\n            if (options.sourcepos) {\n                var pos = node.sourcepos;\n                if (pos) {\n                    attrs.push([\n                        \"sourcepos\",\n                        String(pos[0][0]) +\n                            \":\" +\n                            String(pos[0][1]) +\n                            \"-\" +\n                            String(pos[1][0]) +\n                            \":\" +\n                            String(pos[1][1])\n                    ]);\n                }\n            }\n\n            this.cr();\n            this.out(this.tag(tagname, attrs, selfClosing));\n            if (container) {\n                this.indentLevel += 1;\n            } else if (!container && !selfClosing) {\n                var lit = node.literal;\n                if (lit) {\n                    this.out(this.esc(lit));\n                }\n                this.out(this.tag(\"/\" + tagname));\n            }\n        } else {\n            this.indentLevel -= 1;\n            this.cr();\n            this.out(this.tag(\"/\" + tagname));\n        }\n    }\n    if (options.time) {\n        console.timeEnd(\"rendering\");\n    }\n    this.buffer += \"\\n\";\n    return this.buffer;\n}\n\nfunction out(s) {\n    if (this.disableTags > 0) {\n        this.buffer += s.replace(reXMLTag, \"\");\n    } else {\n        this.buffer += s;\n    }\n    this.lastOut = s;\n}\n\nfunction cr() {\n    if (this.lastOut !== \"\\n\") {\n        this.buffer += \"\\n\";\n        this.lastOut = \"\\n\";\n        for (var i = this.indentLevel; i > 0; i--) {\n            this.buffer += this.indent;\n        }\n    }\n}\n\n// Helper function to produce an XML tag.\nfunction tag(name, attrs, selfclosing) {\n    var result = \"<\" + name;\n    if (attrs && attrs.length > 0) {\n        var i = 0;\n        var attrib;\n        while ((attrib = attrs[i]) !== undefined) {\n            result += \" \" + attrib[0] + '=\"' + this.esc(attrib[1]) + '\"';\n            i++;\n        }\n    }\n    if (selfclosing) {\n        result += \" /\";\n    }\n    result += \">\";\n    return result;\n}\n\n// quick browser-compatible inheritance\nXmlRenderer.prototype = Object.create(Renderer.prototype);\n\nXmlRenderer.prototype.render = render;\nXmlRenderer.prototype.out = out;\nXmlRenderer.prototype.cr = cr;\nXmlRenderer.prototype.tag = tag;\nXmlRenderer.prototype.esc = escapeXml;\n\nexport default XmlRenderer;\n"],"sourceRoot":""}